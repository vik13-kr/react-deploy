{"version":3,"sources":["Components/Dashboard/Dashboard.js","Components/Zones/ZonesComponent.js","Components/BasicInfo/BasicInfo.js","Route.js","Components/Navbar/NavbarComponent.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","Zones","useStyles","makeStyles","theme","textField","marginLeft","spacing","marginRight","marginTop","width","button","paddingLeft","paddingRight","BasicInfo","classes","Grid","container","direction","justify","className","alignItems","item","Typography","variant","align","TextField","id","label","Button","color","type","Routing","exact","path","component","Navbar","to","size","App","wrap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b8d473b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Dashboard = () =>{\r\n    return(\r\n        <div>\r\n            <h1>This is Dashboard page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst Zones = () =>{\r\n    return(\r\n        <div>\r\n            <h1>This is Zones</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Zones;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport './BasicInfoStyle.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({    \r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      marginTop : theme.spacing(3),\r\n      width: '30ch',\r\n    },\r\n    button :{\r\n        paddingLeft :  '2rem',\r\n        paddingRight :  '2rem',\r\n        marginTop : theme.spacing(3),\r\n        \r\n    }\r\n}));\r\n\r\nconst BasicInfo = () =>{\r\n    const classes = useStyles();\r\n   return(     \r\n\r\n        <Grid container direction ='column' justify= 'center' className = 'info-container' alignItems = 'center'>\r\n            <Grid item>\r\n                <Typography variant ='h4' align = 'center'>\r\n                    Basic Info\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid  item>\r\n                <form className = 'info-form'>                \r\n                    <TextField className = {classes.textField} id=\"standard-basic\" label=\"Country\" /><br/>\r\n                    <TextField className = {classes.textField} id=\"standard-basic\" label=\"State\" /><br/>\r\n                    <TextField className = {classes.textField} id=\"standard-basic\" label=\"City\" /><br/>                          \r\n                    </form>\r\n            </Grid>\r\n\r\n            <Grid  item >\r\n                <Button className ={classes.button} variant=\"contained\" color=\"secondary\" type = 'submit'>\r\n                    Submit\r\n                </Button>    \r\n            </Grid>\r\n        </Grid>\r\n\r\n\r\n   )\r\n}\r\n\r\nexport default BasicInfo;","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom'; \r\n\r\n//components\r\nimport Dashboard from './Components/Dashboard/Dashboard'\r\nimport Zones from './Components/Zones/ZonesComponent'\r\nimport BasicInfo from './Components/BasicInfo/BasicInfo'\r\n\r\nconst Routing = () =>{\r\n    return(\r\n        <div>\r\n            <Switch>\r\n                <Route exact path = '/'  >\r\n                    <BasicInfo/> \r\n                </Route>\r\n                <Route exact path = '/deparments' component = {Zones} >\r\n                    <Dashboard/> \r\n                </Route>\r\n                <Route exact path = '/zones' component = {Zones} >\r\n                    <Zones/>\r\n                 </Route>\r\n                <Route exact path = '/users'  > \r\n                    <h3>This is Users page</h3>\r\n                </Route>\r\n                <Route exact path = '/tasks' >\r\n                    <h3>This is Tasks page</h3>\r\n                </Route>\r\n                <Route exact path = '/assets'  >\r\n                    <h3>This is Assets page</h3>\r\n                </Route>\r\n                <Route exact path = '/reports'  > \r\n                    <h3>This is Reports page</h3>\r\n                </Route>                \r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routing; ","import React from 'react';\r\nimport './NavbarStyle.css';\r\n\r\nimport { AiFillHome } from \"react-icons/ai\";\r\nimport {FcDepartment} from 'react-icons/fc';\r\nimport {FaUsers, FaTasks, FaToolbox} from 'react-icons/fa';\r\nimport {HiOutlineDocumentReport} from 'react-icons/hi';\r\nimport {BsConeStriped} from 'react-icons/bs';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <div className = 'nav-container'>\r\n            <ul className = 'nav-ul'>\r\n                <Link to='/'>\r\n                    <li className = 'nav-li'>\r\n                        <AiFillHome  size = '1rem'/> Dashboard\r\n                    </li>\r\n                </Link>  \r\n\r\n                <Link to= '/deparments'>\r\n                    <li className = 'nav-li'>\r\n                        <FcDepartment size = '1rem' /> Departments \r\n                    </li>\r\n                </Link>   \r\n\r\n                <Link to= '/zones'>\r\n                    <li className = 'nav-li' >\r\n                        <BsConeStriped size = '1rem'/> Zones\r\n                    </li>\r\n                </Link>   \r\n\r\n                <Link to= '/users'>\r\n                    <li className = 'nav-li'>\r\n                        <FaUsers size = '1.1rem'/> Users\r\n                    </li>\r\n                </Link> \r\n\r\n                <Link to= '/tasks'>\r\n                    <li className = 'nav-li'>\r\n                        <FaTasks size = '1rem' /> Tasks\r\n                    </li>\r\n                </Link>\r\n                    \r\n                <Link to= '/assets'>\r\n                    <li className = 'nav-li' >\r\n                        <FaToolbox size = '1rem'/> Assets\r\n                    </li> \r\n                </Link>\r\n                    \r\n                <Link to= '/reports'>\r\n                    <li className = 'nav-li' >\r\n                        <HiOutlineDocumentReport size = '1rem'/> Reports\r\n                    </li> \r\n                </Link>                               \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\n\n//router import\nimport Routing from './Route';\n\n//components imports\nimport Navbar from './Components/Navbar/NavbarComponent';\n\n\n//material-ui\nimport { Grid } from '@material-ui/core';\n\nfunction App() {\n  return (\n    \n        \n    <Grid container direction = 'row' spacing ={3} wrap= \"nowrap\"  >\n      <Grid item>         \n        <Navbar/>        \n      </Grid>\n      \n      <Grid item>\n        <Routing /> \n      </Grid> \n\n    </Grid>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}